Análise Arquitetural Completa - EPS Campanhas
Após realizar a análise abrangente do repositório EPS-CAMPANHA-Error, posso fornecer o relatório técnico detalhado que você solicitou.

Visão Macro - Arquitetura Geral
Stack Tecnológico Identificado:
Backend: NestJS (Framework Node.js) + TypeScript + Prisma ORM

Frontend: Next.js 16 (React 19) + TypeScript + TailwindCSS + Headless UI

Banco de Dados: PostgreSQL 15 (containerizado via Docker)

Autenticação: JWT + Passport.js + Guards customizados

Orquestração: Docker Compose para ambiente de desenvolvimento

Arquitetura de Pastas:
text
├── backend/
│   ├── src/
│   │   ├── modulos/          # Módulos de negócio (Domain-Driven Design)
│   │   ├── prisma/           # Configuração do ORM
│   │   └── app.module.ts     # Módulo raiz do NestJS
│   └── prisma/
│       └── schema.prisma     # Schema do banco de dados
└── frontend/
    └── src/
        ├── app/              # Rotas Next.js (App Router)
        ├── components/       # Componentes reutilizáveis
        ├── modulos/          # Módulos específicos de negócio
        └── lib/              # Utilities e configurações
Mapeamento dos Módulos de Negócio
Com base na análise do app.module.ts e schema do banco, identifiquei 15 módulos principais:

Módulo: Autenticação (/api/auth)
1. Resumo da Lógica de Negócio:
Este módulo gerencia todo o fluxo de registro, login, reset de senha e controle de acesso da plataforma. Implementa um sistema de hierarquia com três papéis (ADMIN, GERENTE, VENDEDOR) e fluxo de aprovação, onde novos usuários ficam PENDENTES até serem aprovados pelo Admin.

2. Mapeamento de Conexões:
A. Fluxo: Registro de Novo Usuário

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(auth)/registro/page.tsx

Lógica: Usuário preenche formulário com email, senha, nome, CPF, papel desejado e ótica. Ao submeter, chama o serviço de autenticação.

Conexão: Chamada POST para /api/auth/registro

Ponto de Trânsito (Backend - Rota/API):

Arquivo(s): /backend/src/modulos/autenticacao/autenticacao.controller.ts

Lógica: Define rota POST /api/auth/registro. Não requer autenticação (rota pública).

Ponto Central (Backend - Service):

Arquivo(s): /backend/src/modulos/autenticacao/autenticacao.service.ts

Lógica: Regras de negócio críticas:

Valida se email/CPF já existem

Hash da senha usando bcrypt

Cria usuário com status PENDENTE (awaiting approval)

Se papel = VENDEDOR, vincula com gerenteId

Retorna resposta sem dados sensíveis

Ponto Final (Backend - Model/Banco):

Arquivo(s): /backend/prisma/schema.prisma (model Usuario)

Lógica: Executa INSERT INTO usuarios com status=PENDENTE, senhaHash criptografada, relações com Optica e Gerente estabelecidas.

B. Fluxo: Login e Geração de JWT

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(auth)/login/page.tsx

Lógica: Usuário informa email e senha, chama serviço de login.

Conexão: Chamada POST para /api/auth/login

Ponto Central (Backend - Service):

Lógica: Validações de segurança:

Verifica se usuário existe

Compara senha usando bcrypt

Valida se status = ATIVO (não PENDENTE/BLOQUEADO)

Gera JWT com payload (id, email, papel, opticaId)

Define cookie httpOnly com token

Ponto Final (Frontend - Context):

Arquivo(s): /frontend/src/contexts/AutenticacaoContext.tsx

Lógica: Armazena dados do usuário no estado global e redireciona conforme papel (Admin → /admin, Vendedor → /campanhas)

Módulo: Campanhas (/api/campanhas)
1. Resumo da Lógica de Negócio:
Este é o módulo central da plataforma. Gerencia campanhas de vendas com sistema de cartelas gamificadas. Admins criam campanhas com múltiplas cartelas (cartela 1, 2, 3...), cada cartela tem requisitos específicos de produtos. Vendedores progridem completando cartelas e ganham Moedinhas EPS (gamificação) + Pontos Reais (equivalentes a R$). Suporta auto-replicação infinita de cartelas e targeting por óticas específicas.

2. Mapeamento de Conexões:
A. Fluxo: Criação de Campanha pelo Admin

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(dashboard)/admin/campanhas/criar/page.tsx

Lógica: Admin preenche wizard completo: dados básicos (título, datas, valores), targeting de óticas, criação de cartelas e requisitos. Suporte para auto-replicação infinita.

Conexão: Chamada POST para /api/campanhas

Ponto de Trânsito (Backend):

Arquivo(s): /backend/src/modulos/campanhas/campanha.controller.ts

Lógica: Rota protegida (@Papeis('ADMIN')) com guard JWT + Role-based access

Ponto Central (Backend - Service):

Arquivo(s): /backend/src/modulos/campanhas/campanha.service.ts

Lógica: Regras de negócio complexas:

Validação de datas (dataFim > dataInicio)

Criação de relações M2M com óticas-alvo

Se modoCartelas = AUTO_REPLICANTE: cria apenas cartela base

Se modoCartelas = MANUAL: cria todas as cartelas fornecidas

Associa campanha ao admin criador (criadoPorId)

Ponto Final (Backend - Models):

Lógica: Transaction complexa criando Campanha → RegraCartela[] → RequisitoCartela[] → CondicaoRequisito[] em cascade, com integridade referencial

B. Fluxo: Visualização de Campanha pelo Vendedor

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(dashboard)/campanhas/[id]/page.tsx

Lógica: Vendedor acessa campanha específica. Tela mostra cartelas disponíveis, progresso atual, requisitos de cada cartela com status visual.

Conexão: Chamada GET para /api/campanhas/{id}/vendedor-view

Ponto Central (Backend):

Lógica: Algoritmo de Geração Dinâmica de Cartelas:

Se modoCartelas = MANUAL: retorna cartelas fixas do banco

Se modoCartelas = AUTO_REPLICANTE: gera cartelas virtuais baseadas na cartela base

Aplica spillover: vendas excedentes de cartela anterior contam para próxima

Hidrata cada requisito com progresso atual do vendedor

Calcula quantos envios já foram submetidos vs necessários

Módulo: Envio de Vendas (/api/envio-venda)
1. Resumo da Lógica de Negócio:
Permite que vendedores submetam comprovantes de vendas contra requisitos específicos de cartelas. Sistema de validação em duas fases: Rule Builder (validação automática de produtos) + validação manual do Admin via planilha. Implementa controle de duplicatas e spillover entre cartelas.

2. Mapeamento de Conexões:
A. Fluxo: Submissão de Venda pelo Vendedor

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/components/campanhas/FormularioEnvioVenda.tsx

Lógica: Vendedor seleciona requisito da cartela, informa número do pedido, submete comprovante.

Conexão: Chamada POST para /api/envio-venda

Ponto Central (Backend):

Arquivo(s): /backend/src/modulos/envio-venda/envio-venda.service.ts

Lógica: Validações de integridade:

Verifica se campanha está ativa

Valida se vendedor pode participar (tenancy por ótica)

Detecta duplicatas por número de pedido

Cria registro com status EM_ANALISE

Aplica Rule Builder básico (se configurado)

B. Fluxo: Validação de Vendas pelo Admin

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(dashboard)/admin/validacao/page.tsx

Lógica: Admin visualiza lista de vendas EM_ANALISE, pode fazer upload de planilha para validação em lote ou validar individualmente.

Ponto Central (Backend):

Arquivo(s): /backend/src/modulos/validacao/validacao.service.ts

Lógica: Motor de Validação:

Processa planilha Excel/CSV

Aplica mapeamento de colunas salvo pelo Admin

Cross-references número de pedido da planilha com EnvioVenda

Executa Rule Builder (condições configuradas no requisito)

Se válido: aloca venda à cartela, credita pontos, gera RelatorioFinanceiro

Se inválido: marca como REJEITADO com motivo

Spillover: vendas excedentes migram para próxima cartela

Módulo: Validação (/api/validacao)
1. Resumo da Lógica de Negócio:
Sistema avançado de validação de vendas através de Rule Builder dinâmico e processamento de planilhas. Permite criar regras de validação configuráveis (campo X contém Y, valor > Z) e aplicar em lote via upload de planilhas. Controla duplicatas e implementa spillover automático entre cartelas.

2. Mapeamento de Conexões:
A. Fluxo: Upload e Processamento de Planilha

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(dashboard)/admin/validacao/upload/page.tsx

Lógica: Admin faz upload de planilha Excel/CSV, mapeia colunas para campos do sistema (Nome Produto → Coluna A, Valor Venda → Coluna B).

Conexão: Chamada POST para /api/validacao/processar-planilha

Ponto Central (Backend):

Arquivo(s): /backend/src/modulos/validacao/validacao.service.ts

Lógica: Engine de Processamento:

Parse do arquivo (XLSX library)

Aplica mapeamento de colunas (salvo em Usuario.mapeamentoPlanilhaSalvo)

Para cada linha: busca EnvioVenda por numeroPedido

Executa Rule Builder: avalia todas as CondicaoRequisito do requisito

Operadores suportados: CONTEM, NAO_CONTEM, IGUAL_A, MAIOR_QUE, etc.

Se todas as condições passam: VALIDADO, senão: REJEITADO

Módulo: Usuários (/api/usuarios)
1. Resumo da Lógica de Negócio:
Gerenciamento completo de usuários pelo Admin. Controla fluxo de aprovação (PENDENTE → ATIVO), hierarquia Gerente-Vendedor, impersonação para troubleshooting, e integração com sistema de óticas matriz/filial. Gerentes recebem comissão percentual baseada na performance de seus vendedores.

2. Mapeamento de Conexões:
A. Fluxo: Aprovação de Usuário Pendente

Ponto de Partida (Frontend):

Arquivo(s): /frontend/src/app/(dashboard)/admin/usuarios/page.tsx

Lógica: Admin visualiza lista de usuários PENDENTES, pode aprovar ou bloquear.

Conexão: Chamada PATCH para /api/usuarios/{id}/status

Ponto Central (Backend):

Arquivo(s): /backend/src/modulos/usuarios/usuario.service.ts

Lógica: Regras de aprovação:

Valida se ótica informada existe e está ativa

Se papel = VENDEDOR: verifica se gerente existe na mesma ótica

Altera status para ATIVO

Dispara notificação de boas-vindas

Cria permissões de acesso baseadas no papel

Módulo: Óticas (/api/oticas)
1. Resumo da Lógica de Negócio:
Gerencia óticas parceiras com hierarquia Matriz/Filial. Matrizes podem ter múltiplas filiais, e o sistema valida CNPJs tanto da ótica do vendedor quanto de sua matriz. Implementa targeting de campanhas por óticas específicas e controle de visibilidade de ranking.

Módulo: Recompensas (/api/recompensa)
1. Resumo da Lógica de Negócio:
Motor de gamificação que processa cartelas completadas e credita recompensas. Calcula Moedinhas EPS (moeda virtual para ranking e resgate) e Pontos Reais (equivalente a R$ para pagamento). Gera relatórios financeiros e aplica comissões para gerentes. Suporta eventos especiais com multiplicadores (2x, 3x, 4x).

2. Mapeamento de Conexões:
A. Fluxo: Processamento de Cartela Completada

Ponto de Trânsito (Backend - Trigger):

Lógica: Disparado automaticamente quando EnvioVenda é validado e completa todos os requisitos de uma cartela

Ponto Central (Backend):

Arquivo(s): /backend/src/modulos/recompensa/recompensa.service.ts

Lógica: Algoritmo de Recompensas:

Verifica se vendedor já concluiu esta cartela (CartelaConcluida)

Aplica multiplicador de EventoEspecial se ativo

Credita moedinhasPorCartela ao saldoMoedinhas do vendedor

Credita pontosReaisPorCartela gerando RelatorioFinanceiro

Atualiza rankingMoedinhas (nunca subtrai, base do ranking)

Calcula comissão do gerente (percentualGerente da campanha)

Dispara notificação de parabéns

Módulo: Prêmios (/api/premios)
1. Resumo da Lógica de Negócio:
Catálogo de prêmios resgatáveis com Moedinhas EPS. Sistema de estoque, fluxo logístico de resgate (SOLICITADO → ENVIADO → CANCELADO) e controle de disponibilidade. Vendedores trocam moeda virtual acumulada por prêmios físicos.

Módulo: Dashboard (/api/dashboard)
1. Resumo da Lógica de Negócio:
Agregador de dados para painéis personalizados por papel de usuário. Admin vê métricas globais, Gerentes veem performance da equipe, Vendedores veem progresso pessoal. Implementa analytics em tempo real com cache para performance.

Módulo: Ranking (/api/ranking)
1. Resumo da Lógica de Negócio:
Sistema de ranking baseado em rankingMoedinhas (nunca decresce). Suporte para ranking global, por ótica, por campanha. Gerentes de Matriz veem ranking separado por filial. Controle de visibilidade configurável por ótica.

Módulo: Relatório Financeiro (/api/relatorio-financeiro)
1. Resumo da Lógica de Negócio:
Sistema de contas a pagar para Vendedores (por cartela completada) e Gerentes (comissão percentual). Controla status PENDENTE/PAGO, gera extratos, relatórios para contabilidade e integração com sistemas de pagamento.

Observações Técnicas Críticas
1. Economia Dual do Sistema:
Moedinhas EPS: Moeda virtual para gamificação, ranking e resgate de prêmios

Pontos Reais: Equivalente 1:1 com Real brasileiro (R$) para pagamentos financeiros

2. Sistema de Auto-Replicação:
Campanhas podem gerar cartelas infinitas automaticamente

Cartela base define padrão, sistema aplica incrementos configuráveis

Spillover inteligente: vendas excedentes migram entre cartelas

3. Rule Builder Avançado:
Sistema de validação configurável por requisito

Suporte para condições complexas (campo X contém Y AND valor > Z)

Validação tanto em tempo real quanto em lote via planilha

4. Targeting e Tenancy:
Campanhas podem ser direcionadas para óticas específicas

Hierarquia Matriz/Filial com herança de permissões

Controle granular de visibilidade de dados

5. Segurança e Auditoria:
JWT com guards personalizados por papel

Ledger CartelaConcluida previne pagamentos duplicados

Logs detalhados em todos os controllers

Soft deletes e histórico de alterações

Esta arquitetura representa uma plataforma SaaS B2B robusta de gamificação de vendas, com forte ênfase em integridade financeira, escalabilidade e flexibilidade de configuração.