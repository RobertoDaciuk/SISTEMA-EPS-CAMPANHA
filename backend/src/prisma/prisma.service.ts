/**
 * ============================================================================
 * PRISMA SERVICE - Servi√ßo de Conex√£o com Banco de Dados
 * ============================================================================
 * 
 * Descri√ß√£o:
 * Este servi√ßo √© o ponto de entrada √∫nico e centralizado para todas as 
 * opera√ß√µes de banco de dados na aplica√ß√£o "EPS Campanhas". Ele estende o 
 * PrismaClient e gerencia automaticamente o ciclo de vida da conex√£o com o 
 * PostgreSQL.
 * 
 * Responsabilidades:
 * - Estabelecer conex√£o com o banco de dados na inicializa√ß√£o do m√≥dulo
 * - Desconectar graciosamente quando a aplica√ß√£o for encerrada
 * - Fornecer acesso tipado a todos os modelos do banco (Usuario, Campanha, etc.)
 * - Centralizar queries e transa√ß√µes para facilitar manuten√ß√£o e logs
 * 
 * Uso:
 * Injete este servi√ßo em qualquer m√≥dulo para acessar o banco:
 * ```
 * constructor(private readonly prisma: PrismaService) {}
 * 
 * async buscarUsuario(id: string) {
 *   return this.prisma.usuario.findUnique({ where: { id } });
 * }
 * ```
 * 
 * Vantagens desta Abordagem:
 * - Singleton: Uma √∫nica inst√¢ncia do PrismaClient em toda a aplica√ß√£o
 * - Type-safe: TypeScript valida queries em tempo de compila√ß√£o
 * - Connection pooling: Prisma gerencia automaticamente o pool de conex√µes
 * - Graceful shutdown: Conex√µes s√£o fechadas corretamente ao desligar
 * 
 * @module PrismaService
 * ============================================================================
 */

import { Injectable, OnModuleInit, OnModuleDestroy, Logger } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

/**
 * Servi√ßo respons√°vel pela conex√£o e intera√ß√£o com o banco de dados PostgreSQL.
 * 
 * Este servi√ßo estende o PrismaClient, herdando todos os m√©todos para acesso
 * aos modelos (usuario, campanha, envioVenda, etc.) e implementa hooks de
 * ciclo de vida do NestJS para gerenciar a conex√£o automaticamente.
 */
@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  /**
   * Logger dedicado para rastrear eventos relacionados ao Prisma.
   * √ötil para debug de queries, erros de conex√£o e performance.
   */
  private readonly logger = new Logger(PrismaService.name);

  /**
   * Construtor do servi√ßo Prisma.
   * 
   * Inicializa o PrismaClient com configura√ß√µes espec√≠ficas para otimizar
   * a conex√£o com o banco e habilitar logs detalhados em desenvolvimento.
   */
  constructor() {
    super({
      log: [
        // Em desenvolvimento, loga todas as queries para facilitar debug
        { emit: 'event', level: 'query' },
        { emit: 'stdout', level: 'info' },
        { emit: 'stdout', level: 'warn' },
        { emit: 'stdout', level: 'error' },
      ],
      errorFormat: 'colorless', // Formato leg√≠vel de erros no console
    });

    // Listener para logar queries em desenvolvimento (√∫til para otimiza√ß√£o)
    // @ts-ignore - Prisma Client possui tipagem especial para eventos
    this.$on('query', (e) => {
      this.logger.debug(`Query: ${e.query}`);
      this.logger.debug(`Params: ${e.params}`);
      this.logger.debug(`Duration: ${e.duration}ms`);
    });
  }

  /**
   * Hook do ciclo de vida: executado quando o m√≥dulo NestJS √© inicializado.
   * 
   * Este m√©todo √© chamado automaticamente pelo NestJS ap√≥s a cria√ß√£o da
   * inst√¢ncia do servi√ßo. Ele estabelece a conex√£o com o banco de dados
   * PostgreSQL usando as credenciais definidas na DATABASE_URL (.env).
   * 
   * @throws {Error} Se falhar ao conectar ao banco (ex: credenciais inv√°lidas)
   */
  async onModuleInit(): Promise<void> {
    try {
      this.logger.log('Conectando ao banco de dados PostgreSQL...');
      
      // Estabelece conex√£o com o banco (retry autom√°tico configurado no Prisma)
      await this.$connect();
      
      this.logger.log('‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso!');
    } catch (erro) {
      this.logger.error('‚ùå Falha ao conectar ao banco de dados PostgreSQL', erro);
      
      // Em produ√ß√£o, voc√™ pode querer fazer retry ou alertar equipe de DevOps
      throw new Error(`Erro cr√≠tico: N√£o foi poss√≠vel conectar ao banco de dados. ${erro.message}`);
    }
  }

  /**
   * Hook do ciclo de vida: executado quando o m√≥dulo NestJS √© destru√≠do.
   * 
   * Este m√©todo √© chamado automaticamente pelo NestJS quando a aplica√ß√£o
   * est√° sendo encerrada (ex: SIGTERM, SIGINT, processo sendo morto).
   * Ele garante que todas as conex√µes abertas sejam fechadas graciosamente,
   * evitando conex√µes √≥rf√£s no banco de dados.
   * 
   * @throws {Error} Se falhar ao desconectar (geralmente n√£o cr√≠tico)
   */
  async onModuleDestroy(): Promise<void> {
    try {
      this.logger.log('Desconectando do banco de dados PostgreSQL...');
      
      // Fecha todas as conex√µes do pool de forma ordenada
      await this.$disconnect();
      
      this.logger.log('‚úÖ Desconex√£o do PostgreSQL realizada com sucesso!');
    } catch (erro) {
      this.logger.warn('‚ö†Ô∏è Aviso ao desconectar do banco de dados', erro);
      
      // N√£o re-lan√ßa o erro pois a aplica√ß√£o j√° est√° sendo encerrada
    }
  }

  /**
   * M√©todo auxiliar para limpar o banco de dados (√∫til em testes).
   * 
   * ATEN√á√ÉO: Este m√©todo deleta TODOS os dados de TODAS as tabelas.
   * Use SOMENTE em ambiente de desenvolvimento ou testes automatizados.
   * NUNCA chame este m√©todo em produ√ß√£o.
   * 
   * @example
   * ```
   * // Em um arquivo de teste (e2e)
   * beforeEach(async () => {
   *   await prismaService.limparBancoDeDados();
   * });
   * ```
   */
  async limparBancoDeDados(): Promise<void> {
    if (process.env.NODE_ENV === 'production') {
      throw new Error('‚õî BLOQUEADO: N√£o √© permitido limpar banco em produ√ß√£o!');
    }

    this.logger.warn('üßπ Limpando banco de dados (APENAS DESENVOLVIMENTO)...');

    // Ordem de dele√ß√£o respeita foreign keys (depend√™ncias primeiro)
    await this.$transaction([
      this.notificacao.deleteMany(),
      this.resgatePremio.deleteMany(),
      this.relatorioFinanceiro.deleteMany(),
      this.envioVenda.deleteMany(),
      this.requisitoCartela.deleteMany(),
      this.regraCartela.deleteMany(),
      this.campanha.deleteMany(),
      this.premio.deleteMany(),
      this.usuario.deleteMany(),
      this.configuracaoGlobal.deleteMany(),
    ]);

    this.logger.log('‚úÖ Banco de dados limpo com sucesso!');
  }
}
